<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Maki;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MakiTest
{
    [TestClass]
    public class VariantExtensionsTest
    {
        class T1 { }

<#
	for (int types = 2; types < 8; types++)
	{
#>
        class T<#= types #> { }

<#
		for (int i = 1; i <= types; i++)
		{
#>
        [TestMethod]
        public void TestApplyToVariant<#= types #>T<#= i #>()
        {
            var variant = Variant<<#= String.Join(", ", Enumerable.Range(1, types).Select(_ => "int")) #>>.Make<#= i #>(5);

            variant.Apply(
<#
			for (int j = 1; j <= types; j++)
			{
#>
                _ => <#= j == i ? "{ }" : "Assert.Fail()" #><#= j != types ? "," : ");" #>
<#
			}
#>

            var variantT = new Variant<<#= String.Join(", ", Enumerable.Range(1, types).Select(n => "T" + n)) #>>(new T<#= i #>());

            int result = variantT.Apply(
<#
			for (int j = 1; j <= types; j++)
			{
#>
                item => <#= j == i ? 42 : 0 #><#= j != types ? "," : ");" #>
<#
			}
#>
            Assert.AreEqual(42, result);

            var variantResult = variantT.Map(
<#			
			for (int j = 1; j <= types; j++)
			{
#>
                item => <#= j == i ? 42 : 0 #><#= j != types ? "," : ");" #>
<#
			}
#>
            Assert.AreEqual(<#= i - 1 #>, variantResult.Index);
            Assert.AreEqual(42, variantResult.Get<int>());
        }

<#
		}
#>
<#
	}
#>
    }
}
