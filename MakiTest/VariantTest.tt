<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Maki;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

<#
	Func<int, string> TypeList = range => String.Join(", ", Enumerable.Range(1, range).Select(i => "T" + i));
#>
namespace MakiTest
{
    class T1 { }

    class DerivedFromT1 : T1 { }

<# 
	for (int i = 2; i <= 8; i++)
	{
#>
    class T<#= i #> { }

    class DerivedFromT<#= i #> : T<#= i #> { }

    [TestClass]
    public class Variant<#= i #>Test
    {
<#
	for (int j = 1; j <= i; j++)
	{
#>
        [TestMethod]
        public void Variant<#= i #>TestMake<#= j #>()
        {
            var variant = Variant<<#= String.Join(", ", Enumerable.Range(1, i).Select(_ => "int")) #>>.Make<#= j #>(42);

            Assert.AreEqual(<#= j - 1 #>, variant.Index);
            Assert.AreEqual(42, variant.Get<int>());
        }

        [TestMethod]
        public void Variant<#= i #>TestPolymorphism<#= j #>()
        {
            var item = new DerivedFromT<#= j #>();
            Variant<<#= TypeList(i) #>> variant = item;

            Assert.IsTrue(variant.Is<T<#= j #>>());
            Assert.AreEqual(item, variant.Get<T<#= j #>>());
        }

        [TestMethod]
        public void Variant<#= i #>TestAssignT<#= j #>()
        {
            var item = new T<#= j #>();
            Variant<<#= TypeList(i) #>> variant = item;

            Assert.AreEqual(<#= j - 1 #>, variant.Index);
            Assert.IsTrue(variant.Is<T<#= j #>>());
            Assert.AreEqual(item, variant.Get<T<#= j #>>());
            Assert.AreEqual(item, (T<#= j #>)variant);

<#
	for (int k = 1; k <= i; k++)
	{
		if (k == j) continue;
#>
            Assert.IsFalse(variant.Is<T<#= k #>>());
            Assert.ThrowsException<InvalidCastException>(() => { variant.Get<T<#= k #>>(); });
            Assert.ThrowsException<InvalidCastException>(() => { var _ = (T<#= k #>)variant; });
<#
	}
#>
        }

<#
	}
#>
    }
<#
	}
#>
}
