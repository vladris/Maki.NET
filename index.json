{
  "api/Maki.Variant-3.html": {
    "href": "api/Maki.Variant-3.html",
    "title": "Class Variant<T1, T2, T3> | Maki",
    "keywords": "Class Variant<T1, T2, T3> Represents a 3-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3> variant) Parameters Type Name Description Variant <T1, T2, T3> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3> variant) Parameters Type Name Description Variant <T1, T2, T3> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3> variant) Parameters Type Name Description Variant <T1, T2, T3> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3> Extension Methods VariantExtensions.Map<T1, T2, T3, U1, U2, U3>(Variant<T1, T2, T3>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>) VariantExtensions.Apply<T1, T2, T3, U>(Variant<T1, T2, T3>, Func<T1, U>, Func<T2, U>, Func<T3, U>) VariantExtensions.Apply<T1, T2, T3>(Variant<T1, T2, T3>, Action<T1>, Action<T2>, Action<T3>)"
  },
  "api/Maki.NotNullExtensions.html": {
    "href": "api/Maki.NotNullExtensions.html",
    "title": "Class NotNullExtensions | Maki",
    "keywords": "Class NotNullExtensions Extensions for NotNull Inheritance System.Object NotNullExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class NotNullExtensions Methods | Improve this Doc View Source Bind<T, U>(NotNull<T>, Func<T, NotNull<U>>) Binds the given function to the NotNull. Declaration public static NotNull<U> Bind<T, U>(this NotNull<T> notNull, Func<T, NotNull<U>> func) Parameters Type Name Description NotNull <T> notNull This instance. System.Func <T, NotNull <U>> func Function to bind. Returns Type Description NotNull <U> NotNull containing the result of the function. Type Parameters Name Description T NotNull type. U Function return NotNull type. | Improve this Doc View Source Map<T, U>(NotNull<T>, Func<T, U>) Mapsthe given function to the NotNull. Declaration public static NotNull<U> Map<T, U>(this NotNull<T> notNull, Func<T, U> func) Parameters Type Name Description NotNull <T> notNull This instance. System.Func <T, U> func Function to map. Returns Type Description NotNull <U> NotNull containing the result of the function. Type Parameters Name Description T NotNull type. U Function return type Exceptions Type Condition System.ArgumentNullException Thrown if the function returns null."
  },
  "api/Maki.Error.html": {
    "href": "api/Maki.Error.html",
    "title": "Class Error | Maki",
    "keywords": "Class Error Provides static utilities for Error. Inheritance System.Object Error Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class Error Methods | Improve this Doc View Source Make<T>(Func<T>) Creates an Error containing the result of calling the given function. Declaration public static Error<T> Make<T>(Func<T> func) Parameters Type Name Description System.Func <T> func Function to call. Returns Type Description Error <T> Error containing either the result of the function or an exception. Type Parameters Name Description T Error type. | Improve this Doc View Source MakeException<T>(Exception) Creates a new Error containing an exception. Declaration public static Error<T> MakeException<T>(Exception e) Parameters Type Name Description System.Exception e Exception to hold in the new Error. Returns Type Description Error <T> Error containing the given exception. Type Parameters Name Description T Error type. | Improve this Doc View Source MakeValue<T>(T) Creates a new Error containing a value. Declaration public static Error<T> MakeValue<T>(T item) Parameters Type Name Description T item Item to hold in the new Error. Returns Type Description Error <T> Error containing the given item. Type Parameters Name Description T Error type."
  },
  "api/Maki.html": {
    "href": "api/Maki.html",
    "title": "Namespace Maki | Maki",
    "keywords": "Namespace Maki Classes Either<TLeft, TRight> Represents a 2-type discriminate union with Left and Right components. Error Provides static utilities for Error. Error<T> Error holds either a value of type T or an exception. ErrorExtensions Extensions for Error. NotNull Provides static utilities for NotNull. NotNullExtensions Extensions for NotNull Optional Provides static utilities for Optional. Optional<T> Represents an optional item of type T . OptionalExtensions Extensions for Optional Variant<T1> Represents a 1-type discriminate union. Variant<T1, T2> Represents a 2-type discriminate union. Variant<T1, T2, T3> Represents a 3-type discriminate union. Variant<T1, T2, T3, T4> Represents a 4-type discriminate union. Variant<T1, T2, T3, T4, T5> Represents a 5-type discriminate union. Variant<T1, T2, T3, T4, T5, T6> Represents a 6-type discriminate union. Variant<T1, T2, T3, T4, T5, T6, T7> Represents a 7-type discriminate union. Variant<T1, T2, T3, T4, T5, T6, T7, T8> Represents a 8-type discriminate union. VariantExtensions Extensions for Variant. Structs NotNull<T> Represents an object that cannot be null. Enums Never Represents an uninhabitable type. Unit Represents a unit type."
  },
  "api/Maki.Variant-2.html": {
    "href": "api/Maki.Variant-2.html",
    "title": "Class Variant<T1, T2> | Maki",
    "keywords": "Class Variant<T1, T2> Represents a 2-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2> variant) Parameters Type Name Description Variant <T1, T2> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2> variant) Parameters Type Name Description Variant <T1, T2> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2> Extension Methods VariantExtensions.Map<T1, T2, U1, U2>(Variant<T1, T2>, Func<T1, U1>, Func<T2, U2>) VariantExtensions.Apply<T1, T2, U>(Variant<T1, T2>, Func<T1, U>, Func<T2, U>) VariantExtensions.Apply<T1, T2>(Variant<T1, T2>, Action<T1>, Action<T2>)"
  },
  "api/Maki.Unit.html": {
    "href": "api/Maki.Unit.html",
    "title": "Enum Unit | Maki",
    "keywords": "Enum Unit Represents a unit type. Namespace : Maki Assembly : Maki.dll Syntax public enum Unit Examples A unit type has only one possible value. It is semantically equivalent to void , but can be instantiated. Optional<T> uses Unit to represent the absence of a value. using Maki; using System; namespace Samples { class Program { // Assume a generic library method which expects a Func<int, T> and applies // it to 42 static T Apply<T>(Func<int, T> func) { return func(42); } static void Main(string[] args) { // If the return type is not meaningful, we would use void but we // cannot create a Func<int, void> since cannot be used as a generic // argument. We can return Unit instead. Func<int, Unit> func = i => Unit.Singleton; Apply(func); } } } Fields Name Description Singleton Unique value."
  },
  "api/Maki.Optional-1.html": {
    "href": "api/Maki.Optional-1.html",
    "title": "Class Optional<T> | Maki",
    "keywords": "Class Optional<T> Represents an optional item of type T . Inheritance System.Object Optional<T> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Optional<T> Type Parameters Name Description T Contained item type. Examples The following example shows how to use an Optional object to represent a value or absence of a value. using Maki; using System; namespace Samples { class Program { // Return a value only if a condition is met, otherwise Nothing static Optional<int> TryGet() { var value = new Random().Next(100); return value < 50 ? Optional.Make(value) : Optional.Nothing; } static void Main(string[] args) { var maybeInt = TryGet(); // HasValue checks for presence of the value if (maybeInt.HasValue) { // Get() returns the value from the Optional Console.WriteLine(maybeInt.Get()); } else { Console.WriteLine(\"maybeInt is empty\"); } } } } Constructors | Improve this Doc View Source Optional() Creates an empty Optional. Declaration public Optional() | Improve this Doc View Source Optional(T) Creates an Optional holding the given item. Declaration public Optional(T item) Parameters Type Name Description T item Item to place into the Optional. Properties | Improve this Doc View Source HasValue True if the optional holds an item. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Nothing Represtens an empty Optional of the given type T . Declaration public static Optional<T> Nothing { get; } Property Value Type Description Optional <T> Methods | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean True if the objects are equal. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Get() Gets the item held by this Optional. Declaration public T Get() Returns Type Description T Item held by this Optional. Exceptions Type Condition System.InvalidCastException Thrown when the Optional does not hold an item. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.Object.GetHashCode() Operators | Improve this Doc View Source Explicit(Optional<T> to T) Explicitly casts from the given Optional to the held item type. Declaration public static explicit operator T(Optional<T> optional) Parameters Type Name Description Optional <T> optional Optional to cast from. Returns Type Description T | Improve this Doc View Source Implicit(T to Optional<T>) Implicitly casts from the given item to an Optional holding the item. Declaration public static implicit operator Optional<T>(T item) Parameters Type Name Description T item Item to cast from. Returns Type Description Optional <T> | Improve this Doc View Source Implicit(Unit to Optional<T>) Creates a new empty Optional. Declaration public static implicit operator Optional<T>(Unit unit) Parameters Type Name Description Unit unit Unit type, can be Optional.Nothing. Returns Type Description Optional <T> Extension Methods OptionalExtensions.Bind<T, U>(Optional<T>, Func<T, Optional<U>>) OptionalExtensions.Map<T, U>(Optional<T>, Func<T, U>)"
  },
  "api/Maki.NotNull.html": {
    "href": "api/Maki.NotNull.html",
    "title": "Class NotNull | Maki",
    "keywords": "Class NotNull Provides static utilities for NotNull. Inheritance System.Object NotNull Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class NotNull Examples The following example shows how to use NotNull.MakeOptional to convert a potentially null value into an Optional that either contains Nothing or a NotNull value. using System; using Maki; namespace Samples { class Program { // No need to check argument before using it, it can never be null static void UseValue(NotNull<string> value) { Console.WriteLine(value.Item); } static void Main(string[] args) { // An instance that could be null string valueOrNull = null; if (DateTime.Today.DayOfWeek == DayOfWeek.Friday) valueOrNull = \"It's Friday!\"; // Converts a potentially null value into an Optional Optional<NotNull<string>> optionalValue = NotNull.MakeOptional(valueOrNull); // Check that the Optional contains a value if (optionalValue.HasValue) { // Get NonNull from Optional UseValue(optionalValue.Get()); } } } } Methods | Improve this Doc View Source Make<T>(T) Creates a new NotNull from the given object. Declaration public static NotNull<T> Make<T>(T item) Parameters Type Name Description T item Object to store. Returns Type Description NotNull <T> Type Parameters Name Description T Item type. Exceptions Type Condition System.ArgumentNullException Thrown if the argument is null. | Improve this Doc View Source MakeOptional<T>(T) Creates an Optional from the given object which is either Nothing if the object is null or NotNull if the object is not null. Declaration public static Optional<NotNull<T>> MakeOptional<T>(T item) Parameters Type Name Description T item Object to store. Returns Type Description Optional < NotNull <T>> NotNull if object is not null, Nothing otherwise. Type Parameters Name Description T Item type."
  },
  "api/Maki.Never.html": {
    "href": "api/Maki.Never.html",
    "title": "Enum Never | Maki",
    "keywords": "Enum Never Represents an uninhabitable type. Namespace : Maki Assembly : Maki.dll Syntax public enum Never Examples Never is impossible to instantiate, thus it can be use to denote absence of a value. The following example shows two use-cases of Never: explicitly showing a method does not return and as a generic type argument to remove the type option. using Maki; using System; namespace Samples { class Program { // This function never returns static Never Fail(string message) { throw new Exception(message); } // This function also never returns static Never LoopForever() { while (true) { } } // Assume a generic library method which expects an Either<T, U> static void NeedsGenericEither<T, U>(Either<T, U> either) { // ... } static void Main(string[] args) { // We can remove a type from Either by providing Never Either<int, Never> either = 42; NeedsGenericEither(either); } } }"
  },
  "api/Maki.VariantExtensions.html": {
    "href": "api/Maki.VariantExtensions.html",
    "title": "Class VariantExtensions | Maki",
    "keywords": "Class VariantExtensions Extensions for Variant. Inheritance System.Object VariantExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class VariantExtensions Methods | Improve this Doc View Source Apply<T1, T2>(Variant<T1, T2>, Action<T1>, Action<T2>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2>(this Variant<T1, T2> variant, Action<T1> act1, Action<T2> act2) Parameters Type Name Description Variant <T1, T2> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. | Improve this Doc View Source Apply<T1, T2, T3>(Variant<T1, T2, T3>, Action<T1>, Action<T2>, Action<T3>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3>(this Variant<T1, T2, T3> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3) Parameters Type Name Description Variant <T1, T2, T3> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. | Improve this Doc View Source Apply<T1, T2, U>(Variant<T1, T2>, Func<T1, U>, Func<T2, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, U>(this Variant<T1, T2> variant, Func<T1, U> func1, Func<T2, U> func2) Parameters Type Name Description Variant <T1, T2> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4>(Variant<T1, T2, T3, T4>, Action<T1>, Action<T2>, Action<T3>, Action<T4>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3, T4>(this Variant<T1, T2, T3, T4> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3, Action<T4> act4) Parameters Type Name Description Variant <T1, T2, T3, T4> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. System.Action <T4> act4 The fourth action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. | Improve this Doc View Source Apply<T1, T2, T3, U>(Variant<T1, T2, T3>, Func<T1, U>, Func<T2, U>, Func<T3, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, U>(this Variant<T1, T2, T3> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3) Parameters Type Name Description Variant <T1, T2, T3> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5>(Variant<T1, T2, T3, T4, T5>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3, T4, T5>(this Variant<T1, T2, T3, T4, T5> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3, Action<T4> act4, Action<T5> act5) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. System.Action <T4> act4 The fourth action. System.Action <T5> act5 The fifth action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. | Improve this Doc View Source Apply<T1, T2, T3, T4, U>(Variant<T1, T2, T3, T4>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, T4, U>(this Variant<T1, T2, T3, T4> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3, Func<T4, U> func4) Parameters Type Name Description Variant <T1, T2, T3, T4> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. System.Func <T4, U> func4 The fourth function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6>(Variant<T1, T2, T3, T4, T5, T6>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3, T4, T5, T6>(this Variant<T1, T2, T3, T4, T5, T6> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3, Action<T4> act4, Action<T5> act5, Action<T6> act6) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. System.Action <T4> act4 The fourth action. System.Action <T5> act5 The fifth action. System.Action <T6> act6 The sixth action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, U>(Variant<T1, T2, T3, T4, T5>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, T4, T5, U>(this Variant<T1, T2, T3, T4, T5> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3, Func<T4, U> func4, Func<T5, U> func5) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. System.Func <T4, U> func4 The fourth function. System.Func <T5, U> func5 The fifth function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6, T7>(Variant<T1, T2, T3, T4, T5, T6, T7>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3, T4, T5, T6, T7>(this Variant<T1, T2, T3, T4, T5, T6, T7> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3, Action<T4> act4, Action<T5> act5, Action<T6> act6, Action<T7> act7) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. System.Action <T4> act4 The fourth action. System.Action <T5> act5 The fifth action. System.Action <T6> act6 The sixth action. System.Action <T7> act7 The seventh action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6, U>(Variant<T1, T2, T3, T4, T5, T6>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, T4, T5, T6, U>(this Variant<T1, T2, T3, T4, T5, T6> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3, Func<T4, U> func4, Func<T5, U> func5, Func<T6, U> func6) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. System.Func <T4, U> func4 The fourth function. System.Func <T5, U> func5 The fifth function. System.Func <T6, U> func6 The sixth function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6, T7, T8>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) Applies the action matching the item inhabiting the variant. Declaration public static void Apply<T1, T2, T3, T4, T5, T6, T7, T8>(this Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant, Action<T1> act1, Action<T2> act2, Action<T3> act3, Action<T4> act4, Action<T5> act5, Action<T6> act6, Action<T7> act7, Action<T8> act8) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant This variant. System.Action <T1> act1 The first action. System.Action <T2> act2 The second action. System.Action <T3> act3 The third action. System.Action <T4> act4 The fourth action. System.Action <T5> act5 The fifth action. System.Action <T6> act6 The sixth action. System.Action <T7> act7 The seventh action. System.Action <T8> act8 The eighth action. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. T8 The eighth type of the variant. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6, T7, U>(Variant<T1, T2, T3, T4, T5, T6, T7>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>, Func<T7, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, T4, T5, T6, T7, U>(this Variant<T1, T2, T3, T4, T5, T6, T7> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3, Func<T4, U> func4, Func<T5, U> func5, Func<T6, U> func6, Func<T7, U> func7) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. System.Func <T4, U> func4 The fourth function. System.Func <T5, U> func5 The fifth function. System.Func <T6, U> func6 The sixth function. System.Func <T7, U> func7 The seventh function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. U The return type of the functions. | Improve this Doc View Source Apply<T1, T2, T3, T4, T5, T6, T7, T8, U>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>, Func<T7, U>, Func<T8, U>) Applies the function matching the item inhabiting the variant. Returns the result of the function. Declaration public static U Apply<T1, T2, T3, T4, T5, T6, T7, T8, U>(this Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant, Func<T1, U> func1, Func<T2, U> func2, Func<T3, U> func3, Func<T4, U> func4, Func<T5, U> func5, Func<T6, U> func6, Func<T7, U> func7, Func<T8, U> func8) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant This variant. System.Func <T1, U> func1 The first function. System.Func <T2, U> func2 The second function. System.Func <T3, U> func3 The third function. System.Func <T4, U> func4 The fourth function. System.Func <T5, U> func5 The fifth function. System.Func <T6, U> func6 The sixth function. System.Func <T7, U> func7 The seventh function. System.Func <T8, U> func8 The eighth function. Returns Type Description U Result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. T8 The eighth type of the variant. U The return type of the functions. | Improve this Doc View Source Map<T1, T2, T3, T4, T5, U1, U2, U3, U4, U5>(Variant<T1, T2, T3, T4, T5>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3, U4, U5> Map<T1, T2, T3, T4, T5, U1, U2, U3, U4, U5>(this Variant<T1, T2, T3, T4, T5> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3, Func<T4, U4> func4, Func<T5, U5> func5) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. System.Func <T4, U4> func4 The fourth function. System.Func <T5, U5> func5 The fifth function. Returns Type Description Variant <U1, U2, U3, U4, U5> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. U4 The fourth type of the returned variant. U5 The fifth type of the returned variant. | Improve this Doc View Source Map<T1, T2, T3, T4, T5, T6, U1, U2, U3, U4, U5, U6>(Variant<T1, T2, T3, T4, T5, T6>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3, U4, U5, U6> Map<T1, T2, T3, T4, T5, T6, U1, U2, U3, U4, U5, U6>(this Variant<T1, T2, T3, T4, T5, T6> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3, Func<T4, U4> func4, Func<T5, U5> func5, Func<T6, U6> func6) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. System.Func <T4, U4> func4 The fourth function. System.Func <T5, U5> func5 The fifth function. System.Func <T6, U6> func6 The sixth function. Returns Type Description Variant <U1, U2, U3, U4, U5, U6> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. U4 The fourth type of the returned variant. U5 The fifth type of the returned variant. U6 The sixth type of the returned variant. | Improve this Doc View Source Map<T1, T2, T3, T4, T5, T6, T7, U1, U2, U3, U4, U5, U6, U7>(Variant<T1, T2, T3, T4, T5, T6, T7>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>, Func<T7, U7>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3, U4, U5, U6, U7> Map<T1, T2, T3, T4, T5, T6, T7, U1, U2, U3, U4, U5, U6, U7>(this Variant<T1, T2, T3, T4, T5, T6, T7> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3, Func<T4, U4> func4, Func<T5, U5> func5, Func<T6, U6> func6, Func<T7, U7> func7) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. System.Func <T4, U4> func4 The fourth function. System.Func <T5, U5> func5 The fifth function. System.Func <T6, U6> func6 The sixth function. System.Func <T7, U7> func7 The seventh function. Returns Type Description Variant <U1, U2, U3, U4, U5, U6, U7> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. U4 The fourth type of the returned variant. U5 The fifth type of the returned variant. U6 The sixth type of the returned variant. U7 The seventh type of the returned variant. | Improve this Doc View Source Map<T1, T2, T3, T4, T5, T6, T7, T8, U1, U2, U3, U4, U5, U6, U7, U8>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>, Func<T7, U7>, Func<T8, U8>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3, U4, U5, U6, U7, U8> Map<T1, T2, T3, T4, T5, T6, T7, T8, U1, U2, U3, U4, U5, U6, U7, U8>(this Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3, Func<T4, U4> func4, Func<T5, U5> func5, Func<T6, U6> func6, Func<T7, U7> func7, Func<T8, U8> func8) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. System.Func <T4, U4> func4 The fourth function. System.Func <T5, U5> func5 The fifth function. System.Func <T6, U6> func6 The sixth function. System.Func <T7, U7> func7 The seventh function. System.Func <T8, U8> func8 The eighth function. Returns Type Description Variant <U1, U2, U3, U4, U5, U6, U7, U8> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. T5 The fifth type of the variant. T6 The sixth type of the variant. T7 The seventh type of the variant. T8 The eighth type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. U4 The fourth type of the returned variant. U5 The fifth type of the returned variant. U6 The sixth type of the returned variant. U7 The seventh type of the returned variant. U8 The eighth type of the returned variant. | Improve this Doc View Source Map<T1, T2, U1, U2>(Variant<T1, T2>, Func<T1, U1>, Func<T2, U2>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2> Map<T1, T2, U1, U2>(this Variant<T1, T2> variant, Func<T1, U1> func1, Func<T2, U2> func2) Parameters Type Name Description Variant <T1, T2> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. Returns Type Description Variant <U1, U2> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. | Improve this Doc View Source Map<T1, T2, T3, U1, U2, U3>(Variant<T1, T2, T3>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3> Map<T1, T2, T3, U1, U2, U3>(this Variant<T1, T2, T3> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3) Parameters Type Name Description Variant <T1, T2, T3> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. Returns Type Description Variant <U1, U2, U3> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. | Improve this Doc View Source Map<T1, T2, T3, T4, U1, U2, U3, U4>(Variant<T1, T2, T3, T4>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>) Maps the function matching the item inhabiting the variant. Returns a new variant containing the result of the function. Declaration public static Variant<U1, U2, U3, U4> Map<T1, T2, T3, T4, U1, U2, U3, U4>(this Variant<T1, T2, T3, T4> variant, Func<T1, U1> func1, Func<T2, U2> func2, Func<T3, U3> func3, Func<T4, U4> func4) Parameters Type Name Description Variant <T1, T2, T3, T4> variant This variant. System.Func <T1, U1> func1 The first function. System.Func <T2, U2> func2 The second function. System.Func <T3, U3> func3 The third function. System.Func <T4, U4> func4 The fourth function. Returns Type Description Variant <U1, U2, U3, U4> New variant containing the result of the applied function. Type Parameters Name Description T1 The first type of the variant. T2 The second type of the variant. T3 The third type of the variant. T4 The fourth type of the variant. U1 The first type of the returned variant. U2 The second type of the returned variant. U3 The third type of the returned variant. U4 The fourth type of the returned variant."
  },
  "api/Maki.Optional.html": {
    "href": "api/Maki.Optional.html",
    "title": "Class Optional | Maki",
    "keywords": "Class Optional Provides static utilities for Optional. Inheritance System.Object Optional Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class Optional Examples The following example shows how to use the Optional utilities for more expressive optional initialization. Optional<int> optional = Optional.Make(42); // equivalent of calling new Optional<int>(42) Optional<int> empty = Optional.Nothing; // equivalent of calling new Optional<int>() Fields | Improve this Doc View Source Nothing Represents an empty Optional. Any empty optional stores a Unit. Declaration public static Unit Nothing Field Value Type Description Unit Methods | Improve this Doc View Source Make<T>(T) Creates an Optional containing the given item. Declaration public static Optional<T> Make<T>(T item) Parameters Type Name Description T item Item to place in the Optional. Returns Type Description Optional <T> A new Optional containing an item of T . Type Parameters Name Description T Item type."
  },
  "api/Maki.Details.VariantBase.html": {
    "href": "api/Maki.Details.VariantBase.html",
    "title": "Class VariantBase | Maki",
    "keywords": "Class VariantBase Used internally to implement Variant types. Inheritance System.Object VariantBase Variant<T1> Variant<T1, T2> Variant<T1, T2, T3> Variant<T1, T2, T3, T4> Variant<T1, T2, T3, T4, T5> Variant<T1, T2, T3, T4, T5, T6> Variant<T1, T2, T3, T4, T5, T6, T7> Variant<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki.Details Assembly : Maki.dll Syntax public abstract class VariantBase Properties | Improve this Doc View Source Index Gets the 0-based index of the type inhabiting the variant. Declaration public byte Index { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean True if the objects are equal. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Get() Gets the item inhabiting the variant as an object. Declaration public object Get() Returns Type Description System.Object Item inhabiting the variant as an object. | Improve this Doc View Source Get<T>() Gets the item inhabiting the variant as a T . Declaration public T Get<T>() Returns Type Description T Item inhabiting the variant as the given type . Type Parameters Name Description T Should be one of the variant's supplied types. Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source Is<T>() Returns a value that indicates whether the variant is inhabited by an item of type T . Declaration public bool Is<T>() Returns Type Description System.Boolean True if the variant is inhabited by an item of type , false otherwise. Type Parameters Name Description T Should be one of the variant's supplied types."
  },
  "api/Maki.Functional.FuncExtensions.html": {
    "href": "api/Maki.Functional.FuncExtensions.html",
    "title": "Class FuncExtensions | Maki",
    "keywords": "Class FuncExtensions Provides Func extension methods to enable currying and partial application. Inheritance System.Object FuncExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki.Functional Assembly : Maki.dll Syntax public static class FuncExtensions Examples The following example shows how the Curry extension method can be used either with one argument for partial application or with no arguments to expand the given function into a set of unary functions. using Maki.Functional; using System; namespace Samples { class Program { static void Main(string[] args) { // A function which takes two arguments Func<int, int, int> add = (x, y) => x + y; // add10 is a function which takes a single argument Func<int, int> add10 = add.Curry(10); // Prints 15 Console.WriteLine(add10(5)); // Curry() with no arguments expands the function into a set of unary functions // curried has type Func<int, Func<int, int>> var curried = add.Curry(); // Prints 15 Console.WriteLine(curried(10)(5)); } } } Methods | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, TResult>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, TResult>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, TResult>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, TResult>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, TResult>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, TResult>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, Func<T12, TResult>>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, System.Func <T12, TResult>>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, Func<T12, Func<T13, TResult>>>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, System.Func <T12, System.Func <T13, TResult>>>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, Func<T12, Func<T13, Func<T14, TResult>>>>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, System.Func <T12, System.Func <T13, System.Func <T14, TResult>>>>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, Func<T12, Func<T13, Func<T14, Func<T15, TResult>>>>>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, System.Func <T12, System.Func <T13, System.Func <T14, System.Func <T15, TResult>>>>>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. T15 Func type argument 15. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. T15 Func type argument 15. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, Func<T9, Func<T10, Func<T11, Func<T12, Func<T13, Func<T14, Func<T15, Func<T16, TResult>>>>>>>>>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, System.Func <T9, System.Func <T10, System.Func <T11, System.Func <T12, System.Func <T13, System.Func <T14, System.Func <T15, System.Func <T16, TResult>>>>>>>>>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. T15 Func type argument 15. T16 Func type argument 16. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. T9 Func type argument 9. T10 Func type argument 10. T11 Func type argument 11. T12 Func type argument 12. T13 Func type argument 13. T14 Func type argument 14. T15 Func type argument 15. T16 Func type argument 16. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, TResult>(Func<T1, T2, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, TResult>> Curry<T1, T2, TResult>(this Func<T1, T2, TResult> func) Parameters Type Name Description System.Func <T1, T2, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, TResult>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, TResult>(Func<T1, T2, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, TResult> Curry<T1, T2, TResult>(this Func<T1, T2, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, TResult>>> Curry<T1, T2, T3, TResult>(this Func<T1, T2, T3, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, TResult>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, TResult> Curry<T1, T2, T3, TResult>(this Func<T1, T2, T3, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, TResult>>>> Curry<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, TResult>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, TResult> Curry<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, TResult>>>>> Curry<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, TResult>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, TResult> Curry<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, TResult>>>>>> Curry<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, TResult>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, TResult> Curry<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, TResult>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, TResult>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>) Curries the given Func returning an equivalent set of functions each taking a single argument and returning the next function in the set. Declaration public static Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, Func<T6, Func<T7, Func<T8, TResult>>>>>>>> Curry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> func Function to curry. Returns Type Description System.Func <T1, System.Func <T2, System.Func <T3, System.Func <T4, System.Func <T5, System.Func <T6, System.Func <T7, System.Func <T8, TResult>>>>>>>> Curried function. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. TResult Func return type. | Improve this Doc View Source Curry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1) Applies the first argument to the given Func and returns a new Func derived from the partial application. Declaration public static Func<T2, T3, T4, T5, T6, T7, T8, TResult> Curry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> func Function on which to perform partial application. T1 arg1 First argument of function. Returns Type Description System.Func <T2, T3, T4, T5, T6, T7, T8, TResult> Func derived from given Func by partial application of first argument. Type Parameters Name Description T1 Func type argument 1. T2 Func type argument 2. T3 Func type argument 3. T4 Func type argument 4. T5 Func type argument 5. T6 Func type argument 6. T7 Func type argument 7. T8 Func type argument 8. TResult Func return type."
  },
  "api/Maki.Details.html": {
    "href": "api/Maki.Details.html",
    "title": "Namespace Maki.Details | Maki",
    "keywords": "Namespace Maki.Details Classes VariantBase Used internally to implement Variant types."
  },
  "api/Maki.Variant-6.html": {
    "href": "api/Maki.Variant-6.html",
    "title": "Class Variant<T1, T2, T3, T4, T5, T6> | Maki",
    "keywords": "Class Variant<T1, T2, T3, T4, T5, T6> Represents a 6-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3, T4, T5, T6> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3, T4, T5, T6> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. T4 Represents the variant's fourth type. T5 Represents the variant's fifth type. T6 Represents the variant's sixth type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . | Improve this Doc View Source Variant(T4) Creates a new Variant instance from an item of type T4 . Declaration public Variant(T4 item) Parameters Type Name Description T4 item Item of type T4 . | Improve this Doc View Source Variant(T5) Creates a new Variant instance from an item of type T5 . Declaration public Variant(T5 item) Parameters Type Name Description T5 item Item of type T5 . | Improve this Doc View Source Variant(T6) Creates a new Variant instance from an item of type T6 . Declaration public Variant(T6 item) Parameters Type Name Description T6 item Item of type T6 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make4(T4) Creates a new Variant explicitly placing the item as the fourth type ( T4 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make4(T4 item) Parameters Type Name Description T4 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make5(T5) Creates a new Variant explicitly placing the item as the fifth type ( T5 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make5(T5 item) Parameters Type Name Description T5 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make6(T6) Creates a new Variant explicitly placing the item as the sixth type ( T6 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6> Make6(T6 item) Parameters Type Name Description T6 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T4) Explicitly casts from variant to T4 . Declaration public static explicit operator T4(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T4 . Returns Type Description T4 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T5) Explicitly casts from variant to T5 . Declaration public static explicit operator T5(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T5 . Returns Type Description T5 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6> to T6) Explicitly casts from variant to T6 . Declaration public static explicit operator T6(Variant<T1, T2, T3, T4, T5, T6> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6> variant Variant to cast to T6 . Returns Type Description T6 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> | Improve this Doc View Source Implicit(T4 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T4 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T4 item) Parameters Type Name Description T4 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> | Improve this Doc View Source Implicit(T5 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T5 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T5 item) Parameters Type Name Description T5 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> | Improve this Doc View Source Implicit(T6 to Variant<T1, T2, T3, T4, T5, T6>) Implicitly casts from T6 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6>(T6 item) Parameters Type Name Description T6 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6> Extension Methods VariantExtensions.Map<T1, T2, T3, T4, T5, T6, U1, U2, U3, U4, U5, U6>(Variant<T1, T2, T3, T4, T5, T6>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6, U>(Variant<T1, T2, T3, T4, T5, T6>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6>(Variant<T1, T2, T3, T4, T5, T6>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>)"
  },
  "api/Maki.Variant-1.html": {
    "href": "api/Maki.Variant-1.html",
    "title": "Class Variant<T1> | Maki",
    "keywords": "Class Variant<T1> Represents a 1-type discriminate union. Inheritance System.Object VariantBase Variant<T1> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1> variant) Parameters Type Name Description Variant <T1> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1>"
  },
  "api/Maki.Either-2.html": {
    "href": "api/Maki.Either-2.html",
    "title": "Class Either<TLeft, TRight> | Maki",
    "keywords": "Class Either<TLeft, TRight> Represents a 2-type discriminate union with Left and Right components. Inheritance System.Object Either<TLeft, TRight> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Either<TLeft, TRight> Type Parameters Name Description TLeft Left type. TRight Right type. Examples The following example assigns values to and extracts them from an Either<int, string>. using Maki; using System; namespace Samples { class Program { static void PrintEither(Either<int, string> either) { // If either contains the left type (int) if (either.IsLeft) { // Output the left (int) value to the console Console.WriteLine(either.GetLeft()); } else // either.IsRight { // Output the right (string) value to the console Console.WriteLine(either.GetRight()); } } static void Main(string[] args) { // Assign an int Either<int, string> either = 42; // Will print \"42\" PrintEither(either); either = \"Hello world!\"; // Will print \"Hello world!\" PrintEither(either); } } } Constructors | Improve this Doc View Source Either(TLeft) Creates a new instance of Either from an item of type TLeft . Declaration public Either(TLeft left) Parameters Type Name Description TLeft left Item of type TLeft | Improve this Doc View Source Either(TRight) Creates a new instance of Either from an item of type TRight Declaration public Either(TRight right) Parameters Type Name Description TRight right Item of type TRight Properties | Improve this Doc View Source IsLeft True if Left is inhabited. Declaration public bool IsLeft { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRight True if Right is inhabited. Declaration public bool IsRight { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean True if the objects are equal. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLeft() Gets the Left component. Declaration public TLeft GetLeft() Returns Type Description TLeft Exceptions Type Condition System.InvalidCastException Thrown on get if the inhabiting object is Right. | Improve this Doc View Source GetRight() Gets the Right component. Declaration public TRight GetRight() Returns Type Description TRight Exceptions Type Condition System.InvalidCastException Thrown on get if the inhabiting object is Left. | Improve this Doc View Source MakeLeft(TLeft) Creates a new Either explicitly placing the item in the Left component. Declaration public static Either<TLeft, TRight> MakeLeft(TLeft item) Parameters Type Name Description TLeft item Item to place in the Either. Returns Type Description Either <TLeft, TRight> Either containing the item. Remarks Use this method when both TLeft and TRight are the same. | Improve this Doc View Source MakeRight(TRight) Creates a new Either explicitly placing the item in the Right component. Declaration public static Either<TLeft, TRight> MakeRight(TRight item) Parameters Type Name Description TRight item Item to place in the Either. Returns Type Description Either <TLeft, TRight> Either containing the item. Remarks Use this method when both TLeft and TRight are the same. | Improve this Doc View Source Set(TLeft) Sets the Left component. Declaration public void Set(TLeft left) Parameters Type Name Description TLeft left Item to place in Either. | Improve this Doc View Source Set(TRight) Sets the Right component. Declaration public void Set(TRight right) Parameters Type Name Description TRight right Item to place in Either. | Improve this Doc View Source SetLeft(TLeft) Explicitly sets the Left component. Declaration public void SetLeft(TLeft left) Parameters Type Name Description TLeft left Item to place in Either. Remarks Use whent TLeft and TRight are of the same type. | Improve this Doc View Source SetRight(TRight) Explicitly sets the Right component. Declaration public void SetRight(TRight right) Parameters Type Name Description TRight right Item to place in Either. Remarks Use whent TLeft and TRight are of the same type. Operators | Improve this Doc View Source Explicit(Either<TLeft, TRight> to TLeft) Explicit cast from Either to TLeft . Declaration public static explicit operator TLeft(Either<TLeft, TRight> either) Parameters Type Name Description Either <TLeft, TRight> either Either object to cast. Returns Type Description TLeft Exceptions Type Condition System.InvalidCastException Thrown when the inhabiting object of the either is Right. | Improve this Doc View Source Explicit(Either<TLeft, TRight> to TRight) Explicit cast from Either to TRight . Declaration public static explicit operator TRight(Either<TLeft, TRight> either) Parameters Type Name Description Either <TLeft, TRight> either Either object to cast. Returns Type Description TRight Exceptions Type Condition System.InvalidCastException Thrown when the inhabiting object of the either is Left. | Improve this Doc View Source Implicit(TLeft to Either<TLeft, TRight>) Implicit cast from TLeft item to Either. Creates a new Either. Declaration public static implicit operator Either<TLeft, TRight>(TLeft item) Parameters Type Name Description TLeft item Item to place in Either. Returns Type Description Either <TLeft, TRight> | Improve this Doc View Source Implicit(TRight to Either<TLeft, TRight>) Implicit cast from TRight item to Either. Creates a new Either. Declaration public static implicit operator Either<TLeft, TRight>(TRight item) Parameters Type Name Description TRight item Item to place in Either. Returns Type Description Either <TLeft, TRight>"
  },
  "api/Maki.Variant-5.html": {
    "href": "api/Maki.Variant-5.html",
    "title": "Class Variant<T1, T2, T3, T4, T5> | Maki",
    "keywords": "Class Variant<T1, T2, T3, T4, T5> Represents a 5-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3, T4, T5> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3, T4, T5> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. T4 Represents the variant's fourth type. T5 Represents the variant's fifth type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . | Improve this Doc View Source Variant(T4) Creates a new Variant instance from an item of type T4 . Declaration public Variant(T4 item) Parameters Type Name Description T4 item Item of type T4 . | Improve this Doc View Source Variant(T5) Creates a new Variant instance from an item of type T5 . Declaration public Variant(T5 item) Parameters Type Name Description T5 item Item of type T5 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3, T4, T5> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3, T4, T5> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3, T4, T5> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make4(T4) Creates a new Variant explicitly placing the item as the fourth type ( T4 ). Declaration public static Variant<T1, T2, T3, T4, T5> Make4(T4 item) Parameters Type Name Description T4 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make5(T5) Creates a new Variant explicitly placing the item as the fifth type ( T5 ). Declaration public static Variant<T1, T2, T3, T4, T5> Make5(T5 item) Parameters Type Name Description T5 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3, T4, T5> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3, T4, T5> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3, T4, T5> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5> to T4) Explicitly casts from variant to T4 . Declaration public static explicit operator T4(Variant<T1, T2, T3, T4, T5> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant Variant to cast to T4 . Returns Type Description T4 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5> to T5) Explicitly casts from variant to T5 . Declaration public static explicit operator T5(Variant<T1, T2, T3, T4, T5> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5> variant Variant to cast to T5 . Returns Type Description T5 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3, T4, T5>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3, T4, T5>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3, T4, T5>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> | Improve this Doc View Source Implicit(T4 to Variant<T1, T2, T3, T4, T5>) Implicitly casts from T4 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5>(T4 item) Parameters Type Name Description T4 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> | Improve this Doc View Source Implicit(T5 to Variant<T1, T2, T3, T4, T5>) Implicitly casts from T5 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5>(T5 item) Parameters Type Name Description T5 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5> Extension Methods VariantExtensions.Map<T1, T2, T3, T4, T5, U1, U2, U3, U4, U5>(Variant<T1, T2, T3, T4, T5>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>) VariantExtensions.Apply<T1, T2, T3, T4, T5, U>(Variant<T1, T2, T3, T4, T5>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>) VariantExtensions.Apply<T1, T2, T3, T4, T5>(Variant<T1, T2, T3, T4, T5>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>)"
  },
  "api/Maki.Variant-4.html": {
    "href": "api/Maki.Variant-4.html",
    "title": "Class Variant<T1, T2, T3, T4> | Maki",
    "keywords": "Class Variant<T1, T2, T3, T4> Represents a 4-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3, T4> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3, T4> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. T4 Represents the variant's fourth type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . | Improve this Doc View Source Variant(T4) Creates a new Variant instance from an item of type T4 . Declaration public Variant(T4 item) Parameters Type Name Description T4 item Item of type T4 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3, T4> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3, T4> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3, T4> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make4(T4) Creates a new Variant explicitly placing the item as the fourth type ( T4 ). Declaration public static Variant<T1, T2, T3, T4> Make4(T4 item) Parameters Type Name Description T4 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3, T4> variant) Parameters Type Name Description Variant <T1, T2, T3, T4> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3, T4> variant) Parameters Type Name Description Variant <T1, T2, T3, T4> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3, T4> variant) Parameters Type Name Description Variant <T1, T2, T3, T4> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4> to T4) Explicitly casts from variant to T4 . Declaration public static explicit operator T4(Variant<T1, T2, T3, T4> variant) Parameters Type Name Description Variant <T1, T2, T3, T4> variant Variant to cast to T4 . Returns Type Description T4 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3, T4>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3, T4>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3, T4>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4> | Improve this Doc View Source Implicit(T4 to Variant<T1, T2, T3, T4>) Implicitly casts from T4 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4>(T4 item) Parameters Type Name Description T4 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4> Extension Methods VariantExtensions.Map<T1, T2, T3, T4, U1, U2, U3, U4>(Variant<T1, T2, T3, T4>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>) VariantExtensions.Apply<T1, T2, T3, T4, U>(Variant<T1, T2, T3, T4>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>) VariantExtensions.Apply<T1, T2, T3, T4>(Variant<T1, T2, T3, T4>, Action<T1>, Action<T2>, Action<T3>, Action<T4>)"
  },
  "api/Maki.Variant-8.html": {
    "href": "api/Maki.Variant-8.html",
    "title": "Class Variant<T1, T2, T3, T4, T5, T6, T7, T8> | Maki",
    "keywords": "Class Variant<T1, T2, T3, T4, T5, T6, T7, T8> Represents a 8-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3, T4, T5, T6, T7, T8> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. T4 Represents the variant's fourth type. T5 Represents the variant's fifth type. T6 Represents the variant's sixth type. T7 Represents the variant's seventh type. T8 Represents the variant's eighth type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . | Improve this Doc View Source Variant(T4) Creates a new Variant instance from an item of type T4 . Declaration public Variant(T4 item) Parameters Type Name Description T4 item Item of type T4 . | Improve this Doc View Source Variant(T5) Creates a new Variant instance from an item of type T5 . Declaration public Variant(T5 item) Parameters Type Name Description T5 item Item of type T5 . | Improve this Doc View Source Variant(T6) Creates a new Variant instance from an item of type T6 . Declaration public Variant(T6 item) Parameters Type Name Description T6 item Item of type T6 . | Improve this Doc View Source Variant(T7) Creates a new Variant instance from an item of type T7 . Declaration public Variant(T7 item) Parameters Type Name Description T7 item Item of type T7 . | Improve this Doc View Source Variant(T8) Creates a new Variant instance from an item of type T8 . Declaration public Variant(T8 item) Parameters Type Name Description T8 item Item of type T8 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make4(T4) Creates a new Variant explicitly placing the item as the fourth type ( T4 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make4(T4 item) Parameters Type Name Description T4 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make5(T5) Creates a new Variant explicitly placing the item as the fifth type ( T5 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make5(T5 item) Parameters Type Name Description T5 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make6(T6) Creates a new Variant explicitly placing the item as the sixth type ( T6 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make6(T6 item) Parameters Type Name Description T6 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make7(T7) Creates a new Variant explicitly placing the item as the seventh type ( T7 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make7(T7 item) Parameters Type Name Description T7 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make8(T8) Creates a new Variant explicitly placing the item as the eighth type ( T8 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7, T8> Make8(T8 item) Parameters Type Name Description T8 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T4) Explicitly casts from variant to T4 . Declaration public static explicit operator T4(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T4 . Returns Type Description T4 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T5) Explicitly casts from variant to T5 . Declaration public static explicit operator T5(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T5 . Returns Type Description T5 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T6) Explicitly casts from variant to T6 . Declaration public static explicit operator T6(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T6 . Returns Type Description T6 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T7) Explicitly casts from variant to T7 . Declaration public static explicit operator T7(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T7 . Returns Type Description T7 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7, T8> to T8) Explicitly casts from variant to T8 . Declaration public static explicit operator T8(Variant<T1, T2, T3, T4, T5, T6, T7, T8> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> variant Variant to cast to T8 . Returns Type Description T8 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T4 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T4 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T4 item) Parameters Type Name Description T4 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T5 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T5 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T5 item) Parameters Type Name Description T5 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T6 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T6 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T6 item) Parameters Type Name Description T6 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T7 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T7 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T7 item) Parameters Type Name Description T7 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> | Improve this Doc View Source Implicit(T8 to Variant<T1, T2, T3, T4, T5, T6, T7, T8>) Implicitly casts from T8 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7, T8>(T8 item) Parameters Type Name Description T8 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7, T8> Extension Methods VariantExtensions.Map<T1, T2, T3, T4, T5, T6, T7, T8, U1, U2, U3, U4, U5, U6, U7, U8>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>, Func<T7, U7>, Func<T8, U8>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6, T7, T8, U>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>, Func<T7, U>, Func<T8, U>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6, T7, T8>(Variant<T1, T2, T3, T4, T5, T6, T7, T8>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>)"
  },
  "api/Maki.ErrorExtensions.html": {
    "href": "api/Maki.ErrorExtensions.html",
    "title": "Class ErrorExtensions | Maki",
    "keywords": "Class ErrorExtensions Extensions for Error. Inheritance System.Object ErrorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class ErrorExtensions Methods | Improve this Doc View Source Bind<T, U>(Error<T>, Func<T, Error<U>>) Binds the given function to the Error. Declaration public static Error<U> Bind<T, U>(this Error<T> error, Func<T, Error<U>> func) Parameters Type Name Description Error <T> error This instance. System.Func <T, Error <U>> func Function to bind. Returns Type Description Error <U> Error containing the result of the function or an exception. Type Parameters Name Description T Error type. U Function return Error type. | Improve this Doc View Source Map<T, U>(Error<T>, Func<T, U>) Maps the given function to the Error. Declaration public static Error<U> Map<T, U>(this Error<T> error, Func<T, U> func) Parameters Type Name Description Error <T> error This instance. System.Func <T, U> func Function to map. Returns Type Description Error <U> Error containing the result of the function or an exception. Type Parameters Name Description T Error type. U Function return type"
  },
  "api/Maki.Variant-7.html": {
    "href": "api/Maki.Variant-7.html",
    "title": "Class Variant<T1, T2, T3, T4, T5, T6, T7> | Maki",
    "keywords": "Class Variant<T1, T2, T3, T4, T5, T6, T7> Represents a 7-type discriminate union. Inheritance System.Object VariantBase Variant<T1, T2, T3, T4, T5, T6, T7> Inherited Members VariantBase.Index VariantBase.Is<T>() VariantBase.Get<T>() VariantBase.Get() VariantBase.Equals(Object) VariantBase.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public sealed class Variant<T1, T2, T3, T4, T5, T6, T7> : VariantBase Type Parameters Name Description T1 Represents the variant's first type. T2 Represents the variant's second type. T3 Represents the variant's third type. T4 Represents the variant's fourth type. T5 Represents the variant's fifth type. T6 Represents the variant's sixth type. T7 Represents the variant's seventh type. Examples The following example shows how to assign values of different types to a Variant and how to extract values from it. using Maki; using System; namespace Samples { class Program { static void Main(string[] args) { // A variant can hold a value of any of its generic types Variant<int, string, double> variant = 42; // Depending on the type of the value currently inhabiting the variant, // the right Action gets executed variant.Apply( i => Console.WriteLine(i * 2), s => Console.WriteLine(s + \"!\"), d => Console.WriteLine($\"Double: {d}\") ); // Can reassign variant with another of its generic types variant = \"Hello world\"; // Check the type of the value currently inhabiting the variant if (variant.Is<string>()) { // Extract a string from the variant Console.WriteLine($\"The string is: {variant.Get<string>()}\"); } } } } Constructors | Improve this Doc View Source Variant(T1) Creates a new Variant instance from an item of type T1 . Declaration public Variant(T1 item) Parameters Type Name Description T1 item Item of type T1 . | Improve this Doc View Source Variant(T2) Creates a new Variant instance from an item of type T2 . Declaration public Variant(T2 item) Parameters Type Name Description T2 item Item of type T2 . | Improve this Doc View Source Variant(T3) Creates a new Variant instance from an item of type T3 . Declaration public Variant(T3 item) Parameters Type Name Description T3 item Item of type T3 . | Improve this Doc View Source Variant(T4) Creates a new Variant instance from an item of type T4 . Declaration public Variant(T4 item) Parameters Type Name Description T4 item Item of type T4 . | Improve this Doc View Source Variant(T5) Creates a new Variant instance from an item of type T5 . Declaration public Variant(T5 item) Parameters Type Name Description T5 item Item of type T5 . | Improve this Doc View Source Variant(T6) Creates a new Variant instance from an item of type T6 . Declaration public Variant(T6 item) Parameters Type Name Description T6 item Item of type T6 . | Improve this Doc View Source Variant(T7) Creates a new Variant instance from an item of type T7 . Declaration public Variant(T7 item) Parameters Type Name Description T7 item Item of type T7 . Methods | Improve this Doc View Source Make1(T1) Creates a new Variant explicitly placing the item as the first type ( T1 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make1(T1 item) Parameters Type Name Description T1 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make2(T2) Creates a new Variant explicitly placing the item as the second type ( T2 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make2(T2 item) Parameters Type Name Description T2 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make3(T3) Creates a new Variant explicitly placing the item as the third type ( T3 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make3(T3 item) Parameters Type Name Description T3 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make4(T4) Creates a new Variant explicitly placing the item as the fourth type ( T4 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make4(T4 item) Parameters Type Name Description T4 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make5(T5) Creates a new Variant explicitly placing the item as the fifth type ( T5 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make5(T5 item) Parameters Type Name Description T5 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make6(T6) Creates a new Variant explicitly placing the item as the sixth type ( T6 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make6(T6 item) Parameters Type Name Description T6 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. | Improve this Doc View Source Make7(T7) Creates a new Variant explicitly placing the item as the seventh type ( T7 ). Declaration public static Variant<T1, T2, T3, T4, T5, T6, T7> Make7(T7 item) Parameters Type Name Description T7 item Item to place in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> New Variant instance. Remarks Use this method when the variant contains multiple instances of the same type. This allows explicit placing of the item. Operators | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T1) Explicitly casts from variant to T1 . Declaration public static explicit operator T1(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T1 . Returns Type Description T1 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T2) Explicitly casts from variant to T2 . Declaration public static explicit operator T2(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T2 . Returns Type Description T2 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T3) Explicitly casts from variant to T3 . Declaration public static explicit operator T3(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T3 . Returns Type Description T3 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T4) Explicitly casts from variant to T4 . Declaration public static explicit operator T4(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T4 . Returns Type Description T4 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T5) Explicitly casts from variant to T5 . Declaration public static explicit operator T5(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T5 . Returns Type Description T5 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T6) Explicitly casts from variant to T6 . Declaration public static explicit operator T6(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T6 . Returns Type Description T6 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Explicit(Variant<T1, T2, T3, T4, T5, T6, T7> to T7) Explicitly casts from variant to T7 . Declaration public static explicit operator T7(Variant<T1, T2, T3, T4, T5, T6, T7> variant) Parameters Type Name Description Variant <T1, T2, T3, T4, T5, T6, T7> variant Variant to cast to T7 . Returns Type Description T7 Exceptions Type Condition System.InvalidCastException Thrown if the item inhabiting the variant is not of type | Improve this Doc View Source Implicit(T1 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T1 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T1 item) Parameters Type Name Description T1 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T2 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T2 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T2 item) Parameters Type Name Description T2 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T3 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T3 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T3 item) Parameters Type Name Description T3 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T4 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T4 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T4 item) Parameters Type Name Description T4 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T5 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T5 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T5 item) Parameters Type Name Description T5 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T6 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T6 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T6 item) Parameters Type Name Description T6 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> | Improve this Doc View Source Implicit(T7 to Variant<T1, T2, T3, T4, T5, T6, T7>) Implicitly casts from T7 to variant. Creates a new Variant inhabited by the given item. Declaration public static implicit operator Variant<T1, T2, T3, T4, T5, T6, T7>(T7 item) Parameters Type Name Description T7 item Item to store in the variant. Returns Type Description Variant <T1, T2, T3, T4, T5, T6, T7> Extension Methods VariantExtensions.Map<T1, T2, T3, T4, T5, T6, T7, U1, U2, U3, U4, U5, U6, U7>(Variant<T1, T2, T3, T4, T5, T6, T7>, Func<T1, U1>, Func<T2, U2>, Func<T3, U3>, Func<T4, U4>, Func<T5, U5>, Func<T6, U6>, Func<T7, U7>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6, T7, U>(Variant<T1, T2, T3, T4, T5, T6, T7>, Func<T1, U>, Func<T2, U>, Func<T3, U>, Func<T4, U>, Func<T5, U>, Func<T6, U>, Func<T7, U>) VariantExtensions.Apply<T1, T2, T3, T4, T5, T6, T7>(Variant<T1, T2, T3, T4, T5, T6, T7>, Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>)"
  },
  "api/Maki.NotNull-1.html": {
    "href": "api/Maki.NotNull-1.html",
    "title": "Struct NotNull<T> | Maki",
    "keywords": "Struct NotNull<T> Represents an object that cannot be null. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Maki Assembly : Maki.dll Syntax public struct NotNull<T> Type Parameters Name Description T Type of object. Examples The following example shows how to unpack a potentially null value into a NotNull. Once wrapped in a NotNull, code does not need to perform any additional null checks. using Maki; using System; namespace Samples { class Program { // No need to check argument before using it, it can never be null static void UseValue(NotNull<string> value) { Console.WriteLine(value.Item); } static void Main(string[] args) { // An instance that could be null string valueOrNull = null; if (DateTime.Today.DayOfWeek == DayOfWeek.Friday) valueOrNull = \"It's Friday!\"; // Perform a null check before assigning to NotNull<> if (valueOrNull == null) return; // value is guaranteed to be non-null NotNull<string> value = valueOrNull; // No need to null check from here on UseValue(value); } } } Constructors | Improve this Doc View Source NotNull(T) Creates a new NotNull from the given object. Declaration public NotNull(T item) Parameters Type Name Description T item Object to store. Exceptions Type Condition System.ArgumentNullException Thrown if the argument is null. Properties | Improve this Doc View Source Item Gets the object. Declaration public T Item { get; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean True if the objects are equal. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source MakeOptional(T) Creates an Optional from the given object which is either Nothing if the object is null or NotNull if the object is not null. Declaration public static Optional<NotNull<T>> MakeOptional(T value) Parameters Type Name Description T value Object to store. Returns Type Description Optional < NotNull <T>> NotNull if object is not null, Nothing otherwise. Operators | Improve this Doc View Source Implicit(T to NotNull<T>) Creates a new NotNull from the given object. Declaration public static implicit operator NotNull<T>(T item) Parameters Type Name Description T item Object to store. Returns Type Description NotNull <T> | Improve this Doc View Source Implicit(NotNull<T> to T) Implicit conversion to contained type. Declaration public static implicit operator T(NotNull<T> notNull) Parameters Type Name Description NotNull <T> notNull NotNull instance. Returns Type Description T Extension Methods NotNullExtensions.Bind<T, U>(NotNull<T>, Func<T, NotNull<U>>) NotNullExtensions.Map<T, U>(NotNull<T>, Func<T, U>)"
  },
  "api/Maki.Functional.html": {
    "href": "api/Maki.Functional.html",
    "title": "Namespace Maki.Functional | Maki",
    "keywords": "Namespace Maki.Functional Classes ActionExtensions Provides Action extension methods for converting any Action to an equivalent Func which returns a Unit. With such a conversion, Action and Func can be treated uniformly. FuncExtensions Provides Func extension methods to enable currying and partial application."
  },
  "api/Maki.Functional.ActionExtensions.html": {
    "href": "api/Maki.Functional.ActionExtensions.html",
    "title": "Class ActionExtensions | Maki",
    "keywords": "Class ActionExtensions Provides Action extension methods for converting any Action to an equivalent Func which returns a Unit. With such a conversion, Action and Func can be treated uniformly. Inheritance System.Object ActionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki.Functional Assembly : Maki.dll Syntax public static class ActionExtensions Examples The following example shows how ToFunc() adapter can be use to get a Func<Unit> from an Action. using Maki.Functional; using System; namespace Samples { class Program { // Generic method expects a Func argument public static T Invoke<T>(Func<T> func) { return func(); } static void Main(string[] args) { // An action does not return a value Action act = () => { Console.WriteLine(\"Hello world!\"); }; // ToFunc adapter converts an Action to a Func<Unit> Invoke(act.ToFunc()); } } } Methods | Improve this Doc View Source ToFunc(Action) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<Unit> ToFunc(this Action act) Parameters Type Name Description System.Action act Action to convert to Func. Returns Type Description System.Func < Unit > Func returning a Unit. | Improve this Doc View Source ToFunc<T1>(Action<T1>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, Unit> ToFunc<T1>(this Action<T1> act) Parameters Type Name Description System.Action <T1> act Action to convert to Func. Returns Type Description System.Func <T1, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. T12 Action generic type 12. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. T12 Action generic type 12. T13 Action generic type 13. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. T12 Action generic type 12. T13 Action generic type 13. T14 Action generic type 14. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. T12 Action generic type 12. T13 Action generic type 13. T14 Action generic type 14. T15 Action generic type 15. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9. T10 Action generic type 10. T11 Action generic type 11. T12 Action generic type 12. T13 Action generic type 13. T14 Action generic type 14. T15 Action generic type 15. T16 Action generic type 16. | Improve this Doc View Source ToFunc<T1, T2>(Action<T1, T2>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, Unit> ToFunc<T1, T2>(this Action<T1, T2> act) Parameters Type Name Description System.Action <T1, T2> act Action to convert to Func. Returns Type Description System.Func <T1, T2, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. | Improve this Doc View Source ToFunc<T1, T2, T3>(Action<T1, T2, T3>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, Unit> ToFunc<T1, T2, T3>(this Action<T1, T2, T3> act) Parameters Type Name Description System.Action <T1, T2, T3> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. | Improve this Doc View Source ToFunc<T1, T2, T3, T4>(Action<T1, T2, T3, T4>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, Unit> ToFunc<T1, T2, T3, T4>(this Action<T1, T2, T3, T4> act) Parameters Type Name Description System.Action <T1, T2, T3, T4> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, Unit> ToFunc<T1, T2, T3, T4, T5>(this Action<T1, T2, T3, T4, T5> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, Unit> ToFunc<T1, T2, T3, T4, T5, T6>(this Action<T1, T2, T3, T4, T5, T6> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7>(this Action<T1, T2, T3, T4, T5, T6, T7> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T1, T2, T3, T4, T5, T6, T7, T8> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. | Improve this Doc View Source ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>) Converts an Action to an equivalent Func returning a Unit. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Unit> ToFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> act) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9> act Action to convert to Func. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, Unit > Func returning a Unit. Type Parameters Name Description T1 Action generic type 1. T2 Action generic type 2. T3 Action generic type 3. T4 Action generic type 4. T5 Action generic type 5. T6 Action generic type 6. T7 Action generic type 7. T8 Action generic type 8. T9 Action generic type 9."
  },
  "api/Maki.Error-1.html": {
    "href": "api/Maki.Error-1.html",
    "title": "Class Error<T> | Maki",
    "keywords": "Class Error<T> Error holds either a value of type T or an exception. Inheritance System.Object Error<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public class Error<T> Type Parameters Name Description T Type of value. Examples The following example shows how to use Error to store either a value or an exception. using Maki; using System; namespace Samples { class Program { // Either returns an int or throws an exception static int ReturnValueOrThrow() { var value = new Random().Next(100); return value < 50 ? value : throw new Exception(); } static void Main(string[] args) { // Call function, value holds either an int or an exception Error<int> value = Error.Make(ReturnValueOrThrow); if (value.HasValue) { value = value.Get() * 2; Console.WriteLine(value.Get()); } else // value.IsException { // Get exception from value, can handle or rethrow throw value.Exception(); } } } } Constructors | Improve this Doc View Source Error(T) Creates a new Error from the given item. Declaration public Error(T item) Parameters Type Name Description T item Item to initialize the error with. | Improve this Doc View Source Error(Exception) Creates a new Error from the given exception. Declaration public Error(Exception e) Parameters Type Name Description System.Exception e Exception to initialize Error with. Properties | Improve this Doc View Source HasValue True if Error contains a value. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsError True if Error contains an exception. Declaration public bool IsError { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Exception() Gets the exception inhabiting the Error. Declaration public Exception Exception() Returns Type Description System.Exception Exception inhabiting the Error. Exceptions Type Condition System.InvalidCastException Thrown if the Error contains an exception. | Improve this Doc View Source Get() Gets the value inhabiting the Error. Declaration public T Get() Returns Type Description T Value inhabiting the Error. Exceptions Type Condition System.InvalidCastException Thrown if the Error contains an exception. | Improve this Doc View Source MakeException(Exception) Creates a new Error containing an exception. Declaration public static Error<T> MakeException(Exception e) Parameters Type Name Description System.Exception e Exception to hold in the new Error. Returns Type Description Error <T> Error containing the given exception. | Improve this Doc View Source MakeValue(T) Creates a new Error containing a value. Declaration public static Error<T> MakeValue(T item) Parameters Type Name Description T item Item to hold in the new Error. Returns Type Description Error <T> Error containing the given item. Operators | Improve this Doc View Source Explicit(Error<T> to T) Explicit cast from Error to type T . Declaration public static explicit operator T(Error<T> error) Parameters Type Name Description Error <T> error Error to cast from. Returns Type Description T Exceptions Type Condition System.InvalidCastException Thrown if the Error doesn't contain a value. | Improve this Doc View Source Explicit(Error<T> to Exception) Explicit cast from Error to Exception. Declaration public static explicit operator Exception(Error<T> error) Parameters Type Name Description Error <T> error Error to cast from. Returns Type Description System.Exception Exceptions Type Condition System.InvalidCastException Thrown if the Error doesn't contain an exception. | Improve this Doc View Source Implicit(T to Error<T>) Implicit cast from type T to Error. Declaration public static implicit operator Error<T>(T item) Parameters Type Name Description T item Item to cast from. Returns Type Description Error <T> | Improve this Doc View Source Implicit(Exception to Error<T>) Implicit cast from Exception to Error. Declaration public static implicit operator Error<T>(Exception e) Parameters Type Name Description System.Exception e Exception to cast from. Returns Type Description Error <T> Extension Methods ErrorExtensions.Bind<T, U>(Error<T>, Func<T, Error<U>>) ErrorExtensions.Map<T, U>(Error<T>, Func<T, U>)"
  },
  "api/Maki.OptionalExtensions.html": {
    "href": "api/Maki.OptionalExtensions.html",
    "title": "Class OptionalExtensions | Maki",
    "keywords": "Class OptionalExtensions Extensions for Optional Inheritance System.Object OptionalExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Maki Assembly : Maki.dll Syntax public static class OptionalExtensions Methods | Improve this Doc View Source Bind<T, U>(Optional<T>, Func<T, Optional<U>>) Binds the given function to the Optional. Declaration public static Optional<U> Bind<T, U>(this Optional<T> optional, Func<T, Optional<U>> func) Parameters Type Name Description Optional <T> optional This instance. System.Func <T, Optional <U>> func Function to bind. Returns Type Description Optional <U> Optional containing the result of the function or Nothing. Type Parameters Name Description T Optional type. U Function return Optional type. | Improve this Doc View Source Map<T, U>(Optional<T>, Func<T, U>) Maps the given function to the Optional. Declaration public static Optional<U> Map<T, U>(this Optional<T> optional, Func<T, U> func) Parameters Type Name Description Optional <T> optional This instance. System.Func <T, U> func Function to map. Returns Type Description Optional <U> Optional containing the result of the function or Nothing. Type Parameters Name Description T Optional optional type. U Function return type"
  }
}