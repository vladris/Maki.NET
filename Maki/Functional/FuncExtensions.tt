<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\Templates\Common.t4" #>
<#@ output extension=".cs" #>
using System;

namespace Maki.Functional
{
    /// <summary>
    /// Provides Func extension methods to enable currying and partial application.
    /// </summary>
    /// <example>
    /// The following example shows how the Curry extension method can be used either with one argument
    /// for partial application or with no arguments to expand the given function into a set of unary
    /// functions.
    /// <code>
    /// using Maki.Functional;
    /// using System;
    /// 
    /// namespace Samples
    /// {
    ///     class Program
    ///     {
    ///         static void Main(string[] args)
    ///         {
    ///             // A function which takes two arguments
    ///             Func&lt;int, int, int&gt; add = (x, y) =&gt; x + y;
    /// 
    ///             // add10 is a function which takes a single argument
    ///             Func&lt;int, int&gt; add10 = add.Curry(10);
    /// 
    ///             // Prints 15
    ///             Console.WriteLine(add10(5));
    /// 
    ///             // Curry() with no arguments expands the function into a set of unary functions
    ///             // curried has type Func&lt;int, Func&lt;int, int&gt;&gt;
    ///             var curried = add.Curry();
    /// 
    ///             // Prints 15
    ///             Console.WriteLine(curried(10)(5));
    ///         }
    ///     }
    /// }
    /// </code>
    /// </example>
    public static class FuncExtensions
    {
<#
for (int types = 2; types <= 16; types++)
{
#>
        /// <summary>
        /// Applies the first argument to the given Func and returns a new Func
        /// derived from the partial application.
        /// </summary>
<#
	for (int i = 1; i <= types; i++)
	{
#>
        /// <typeparam name="T<#= i #>">Func type argument <#= i #>.</typeparam>
<#
	}
#>
        /// <typeparam name="TResult">Func return type.</typeparam>
        /// <param name="func">Function on which to perform partial application.</param>
        /// <param name="arg1">First argument of function.</param>
        /// <returns>Func derived from given Func by partial application of first argument.</returns>
        public static Func<<#= JoinWithPrefix(2, types - 1, "T") #>, TResult> 
            Curry<<#= JoinWithPrefix(types, "T") #>, TResult>(
                this Func<<#= JoinWithPrefix(types, "T") #>, TResult> func,
                T1 arg1
            )
            => (<#= JoinWithPrefix(2, types - 1, "arg") #>)
                => func(<#= JoinWithPrefix(types, "arg") #>);

        /// <summary>
        /// Curries the given Func returning an equivalent set of functions each taking
        /// a single argument and returning the next function in the set.
        /// </summary>
<#
	for (int i = 1; i <= types; i++)
	{
#>
        /// <typeparam name="T<#= i #>">Func type argument <#= i #>.</typeparam>
<#
	}
#>
        /// <typeparam name="TResult">Func return type.</typeparam>
        /// <param name="func">Function to curry.</param>
        /// <returns>Curried function.</returns>
        public static <#= JoinWithPrefix(types, "Func<T") #>, TResult<#= String.Concat(Enumerable.Repeat(">", types)) #>
            Curry<<#= JoinWithPrefix(types, "T") #>, TResult>(
                this Func<<#= JoinWithPrefix(types, "T") #>, TResult> func
            )
           <#= String.Concat(RangeWithPrefix(types, " => arg")) #> => func(<#= JoinWithPrefix(types, "arg") #>);

<#
}
#>
    }
}